 Test←{0::⎕EM ⎕SIGNAL ⎕EN
     t←()
    ⍝ Tests ability to navigate sharp, narrow valleys and handle situations where the Jacobian
    ⍝ may lead to a locally rank-deficient J^T J matrix (eg. zero diagonal elements), requiring
    ⍝ robust damping
     t.Beale←{
         B←{
             x y←⍵ ⋄ (1.5 2.25 2.625-x×1-y*⍳3)[(¯1+y)x ⋄ (¯1+y*2)(2×x×y) ⋄ (¯1+y*3)(3×x×y*2)]
         }
         r←3 0.5 CMP(R B #.LMA 1 0.8).p                                ⍝ easy
         r,←3 0.5 CMP(R B #.LMA 1 1).p                                 ⍝ singular Jt J
         r,←3 0.5 CMP(R B #.LMA 0 0).p                                 ⍝ another tricky point
         r,←3 0.5 CMP(R B #.LMA 1 ¯2).p                                ⍝ different quadrant
         r,←(B #.LMA(2 2)(toli:1)).cost>(R B #.LMA 2 2).cost           ⍝ closer to another local minimum
         r,←(B #.LMA(¯1 1)(toli:1)).cost>(R B #.LMA ¯1 1).cost         ⍝ closer to another local minimum
         r
     }
    ⍝ numerical approximation of the Jacobian
     t.BealeNum←{
         B←{
             x y←⍵ ⋄ (1.5 2.25 2.625-x×1-y*⍳3)
         }
         r←3 0.5 CMP(R B #.LMA 1 0.8).p                                ⍝ easy
         r,←3 0.5 CMP(R B #.LMA 1 1).p                                 ⍝ singular Jt J
         r,←3 0.5 CMP(R B #.LMA 0 0).p                                 ⍝ another tricky point
         r,←3 0.5 CMP(R B #.LMA 1 ¯2).p                                ⍝ different quadrant
         r,←(B #.LMA(2 2)(toli:1)).cost>(R B #.LMA 2 2).cost           ⍝ closer to another local minimum
         r,←(B #.LMA(¯1 1)(toli:1)).cost>(R B #.LMA ¯1 1).cost         ⍝ closer to another local minimum
         r
     }
    ⍝ Jacobian and fitting problem with outliers to test loss functions and bare LM
     ExpDec←{A k C←⍺ ⋄ C+A×*-k×⍵}
     ExpDecEv←{x y←⍺ ⋄ A k C←⍵ ⋄ xe←A×x×e←*-k×x ⋄ (y-⍵ ExpDec x)(⍉(-e)⍪xe⍪⍉⍪-=⍨e)}
     y←100×@(?≢x)⊢0.1{⍵+⍺×0.5-⍨?0⍴⍨≢⍵}y0←(p←10 0.5 1)ExpDec⊢x←(⍳100)-1
     t.ExpDecFit←{p x y y0←#.(p x y y0) ⋄ CMP←{0.1>|⍺-⍵}
         r←p CMP(R x y0∘#.ExpDecEv #.LMA(10 0.5 1)(loss:'L2')).p                    ⍝ exact
         r,←p CMP(R x y0∘#.ExpDecEv #.LMA(10 0.5 1)(loss:'L2' ⋄ scale:?(≢x)⍴0)).p   ⍝ exact (wls)
         r,←p CMP(R x y0∘#.ExpDecEv #.LMA(10 0.5 1)(loss:'Huber')).p                ⍝ exact
         r,←p CMP(R x y∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'Cauchy')).p
         r,←p CMP(R x y∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'SoftL1')).p
         r,←p CMP(R x y0∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'Tukey' ⋄ scale:0.1)).p   ⍝ exact with scaling
         r,←p CMP(R x y∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'Welsh')).p
         r,←p CMP(R x y∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'Fair')).p
         r,←p CMP(R x y∘#.ExpDecEv #.LMA(5 0.1 0.5)(loss:'Arctan')).p
         r
     }
     t.ExpDecJac←{p x y←#.(p x y0) ⋄ tol←1E¯10
         R←{⎕←(16↑''),12 ¯5⍕⍵ ⋄ tol>⍵}
         r←R+.×⍨,((y-#.ExpDec∘x)#.Jacobian p)-⊃⌽x y #.ExpDecEv p
         r,←R+.×⍨,(1E¯9(y-#.ExpDec∘x)#.Jacobian p)-⊃⌽x y #.ExpDecEv p
         r
     }
     t.ExpDecLM←{p x y←#.(p x y0)
         R←{⎕←(10↑''),((6 0⍕⊃),(12 ¯5⍕2∘⊃),4∘↓)⍵ ⋄ ⍵}
         cfg←1000000 ⎕CT ⎕CT 0.01 0.01 5(÷5)(÷⎕CT)⎕CT                         ⍝ ti tc tr tg d0 di dd dx dn
         r←p CMP⊃⌽R cfg(y-#.ExpDec∘x)#.LM⊢(5 0.1 0.5)1                    ⍝ only residuals
         r,←p CMP⊃⌽R cfg(x y∘#.ExpDecEv)#.LM⊢(5 0.1 0.5)1                 ⍝ residual and jacobian
         r,←p CMP⊃⌽R cfg((1,⍨⊢,(×⍨1∘↑))x y∘#.ExpDecEv)#.LM⊢(5 0.1 0.5)1   ⍝ everything
         r
     }
    ⍝ Assesses capability to follow a long, narrow, curving multi-dimensional valley, testing
    ⍝ the interplay between step length and direction adjustments controlled by the damping factor
     t.Helical←{
         T←{1|1+(12○⍺+0J1×⍵)÷○2} ⋄ M←{|⍺+0J1×⍵}
         H←{
             a b c←⍵ ⋄ m←a M b ⋄ y←(10×c-10×a T b)(10×m-1)c
             y[((50×b)÷○+.×⍨a b)(-(50×a)÷○+.×⍨a b)10 ⋄ (10×a÷m)(10×b÷m)0 ⋄ 0 0 1]
         }
         r←1 0 0 CMP(R H #.LMA ¯1 0 0).p                                ⍝ standard starting point
         r,←1 0 0 CMP(R H #.LMA ¯1.2 0.1 0.1).p                         ⍝ slightly perturbed
         r,←1 0 0 CMP(R H #.LMA ¯0.9 ¯0.05 ¯0.05).p                     ⍝ in other direction
         r,←1 0 0 CMP(R H #.LMA 0.5 ¯0.5 0.5).p                        ⍝ qualitatively different
         r,←1 0 0 CMP(R H #.LMA ¯0.5 0.5 ¯0.5).p                        ⍝ another one
         r,←1 0 0 CMP(R H #.LMA ¯1 0 10).p                              ⍝ far off in 3rd dimension
         r,←1 0 0 CMP(R H #.LMA ¯1 0 ¯10).p                             ⍝ far off in 3rd dimension
         r,←1 0 0 CMP(R H #.LMA 3 4 5).p                               ⍝ away in all components
         r
     }
    ⍝ Verifies efficiency and correctness for a linear system. Converge should be very fast
    ⍝ (1 or 2 iterations) with minimal damping, demonstrating Gauss-Newton like behavior
     t.Linear←{
         y←(A←?100 10⍴0)+.×x←⍳10 ⋄ s←R{(y-⍨A+.×⍵)A}#.LMA(?10⍴0)0 ⋄ (1=s.iter),(⍳10)CMP s.p
     }
    ⍝ numerical approximation of the Jacobian
     t.LinearNum←{
         y←(A←?100 5⍴0)+.×x←⍳5 ⋄ s←R{y-⍨A+.×⍵}#.LMA(?5⍴0)0 ⋄ (⍳5)CMP s.p
     }
    ⍝ Evaluates LMA's robustness and ability to converge to a solution when the Jacobian
    ⍝ becomes singular (rank-deficient) at or near the optimum
     t.Powell←{
         P←{
             a b c d←⍵ ⋄ r5 r10←5 10*÷2 ⋄ y←(a+10×b)(r5×c-d)(×⍨b-2×c)(r10××⍨a-d)
             y[1 10 0 0 ⋄ 0 0 r5(-r5) ⋄ 0(2×b-2×c)(-2×b-2×c)0 ⋄ (2×r10×a-d)0 0(-2×r10×a-d)]
         }
         r←(4⍴0)CMP(R P #.LMA(3 ¯1 0 1)(tolc:1E¯30)).p                 ⍝ standard starting point
         r,←(4⍴0)CMP(R P #.LMA(0 0 0 0)(tolc:1E¯30)).p                 ⍝ solution (convergence at zero step)
         r,←(4⍴0)CMP(R P #.LMA(1 1 1 1)(tolc:1E¯30)).p                 ⍝ far from solution
         r
     }
    ⍝ Tests LMA's performance in minimizing a classic non-linear function characterized by
    ⍝ a deep, narrow, banana-shaped valley, requiring effective adaptation of search
    ⍝ direction and step size
     Rosenbrock←{p q←⍵ ⋄ ((10×q-×⍨p),1-p)[(-20×p)10 ⋄ ¯1 0]}
     t.Rosenbrock←{
         r←1 1 CMP(R #.Rosenbrock #.LMA 1.5 1.5).p                     ⍝ close to the solution
         r,←1 1 CMP(R #.Rosenbrock #.LMA 2 1).p                        ⍝ not so close
         r,←1 1 CMP(R #.Rosenbrock #.LMA 0 0).p                        ⍝ outside of parabollic valley
         r,←1 1 CMP(R #.Rosenbrock #.LMA ¯1.2 1).p                     ⍝ further
         r,←1 1 CMP(R #.Rosenbrock #.LMA ¯2 ¯2).p                      ⍝ far and wrongly pointed gradient
         r,←1 1 CMP(R #.Rosenbrock #.LMA 2 2).p                        ⍝ far and wrongly pointed gradient
         r
     }
    ⍝ numerical approximation of the Jacobian
     t.RosenbrockNum←{
         r←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA 1.5 1.5).p                    ⍝ close to the solution
         r,←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA 2 1).p                       ⍝ not so close
         r,←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA 0 0).p                       ⍝ outside of parabollic valley
         r,←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA ¯1.2 1).p                    ⍝ further
         r,←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA ¯2 ¯2).p                     ⍝ far and wrongly pointed gradient
         r,←1 1 CMP(R⊃⍤#.Rosenbrock #.LMA 2 2).p                       ⍝ far and wrongly pointed gradient
         r
     }
    ⍝ Check that algorithm finishes on termination conditions
     t.Terminate←{
         r←(R #.Rosenbrock #.LMA(0 0)(toli:10)).(iter>toli)                      ⍝ number of iterations
         r,←(R #.Rosenbrock #.LMA(0 0)(tolc:0)).(rel<tolr)                       ⍝ relative change
         r,←(R #.Rosenbrock #.LMA(0 0)(tolc:0 ⋄ dmax:1000000)).((dnorm>1000000)∧rel=0)   ⍝ maximum damping
         r
     }
     ⍺←0.000001 ⋄ tol←⍺ ⋄ CMP←{tol>|⍺-⍵} ⋄ R←{⎕←(10↑''),⍵.((6 0⍕iter),(12 ¯5⍕cost),p) ⋄ ⍵}
     (t ⎕NS'tol' 'CMP' 'R'){⎕←⍵ ⋄ 0∊⍺⍎⍵,'⍬':('TEST FAILED: ',⍵)⎕SIGNAL 8 ⋄ _←0}¨(↓t.⎕NL 3)⊣⍣(⍵≡'*')⊆⍵
 }
